#!/usr/bin/env python3
"""Setup script for Spotify Playlist Keeper"""

import os
from pathlib import Path
from config import SpotifyConfig, load_env_file


def create_env_file():
    """Create .env file with user input"""
    print("üéµ Spotify Playlist Keeper Setup")
    print("=" * 50)
    print("This setup will help you configure your Spotify API credentials.")
    print()
    print("STEP 1: Create a Spotify App")
    print("1. Go to: https://developer.spotify.com/dashboard/applications")
    print("2. Click 'Create an App'")
    print("3. Fill in app name and description")
    print("4. In 'Redirect URIs', add: http://127.0.0.1:8000/callback")
    print("5. Save the app")
    print("6. Copy your Client ID and Client Secret")
    print()
    
    # Get credentials from user
    client_id = input("Enter your Spotify Client ID: ").strip()
    if not client_id:
        print("‚ùå Client ID is required!")
        return False
    
    client_secret = input("Enter your Spotify Client Secret: ").strip()
    if not client_secret:
        print("‚ùå Client Secret is required!")
        return False
    
    # Optional custom redirect URI
    print(f"\nDefault redirect URI: http://127.0.0.1:8000/callback")
    custom_uri = input("Enter custom redirect URI (or press Enter for default): ").strip()
    
    redirect_uri = custom_uri if custom_uri else "http://127.0.0.1:8000/callback"
    
    # Create .env file
    env_content = f"""# Spotify API Credentials
# Generated by Spotify Playlist Keeper setup

SPOTIFY_CLIENT_ID={client_id}
SPOTIFY_CLIENT_SECRET={client_secret}
SPOTIFY_REDIRECT_URI={redirect_uri}
"""
    
    env_file = Path(".env")
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"\n‚úÖ Configuration saved to {env_file}")
    print("‚ö†Ô∏è  Keep your .env file private - it contains your API credentials!")
    print("\nYou can now run the main application:")
    print("  python3 main.py")
    
    return True


def check_existing_config():
    """Check if configuration already exists"""
    env_file = Path(".env")
    config_file = Path("spotify_config.json")
    
    if env_file.exists() or config_file.exists():
        print("üîç Existing configuration found")
        
        # Load existing config to check completeness
        load_env_file()
        config = SpotifyConfig()
        
        if config.is_configured():
            print("‚úÖ Configuration is complete!")
            print(f"   Client ID: {config.client_id[:8]}...")
            print(f"   Redirect URI: {config.redirect_uri}")
            
            overwrite = input("\nOverwrite existing configuration? (y/N): ").strip().lower()
            return overwrite == 'y'
        else:
            print("‚ö†Ô∏è  Configuration is incomplete")
            return True
    
    return True


def main():
    """Main setup function"""
    try:
        if check_existing_config():
            if create_env_file():
                print("\nüéâ Setup completed successfully!")
                print("\nNext steps:")
                print("1. Run: python3 main.py")
                print("2. Select 'Real Spotify API' service")
                print("3. Follow the authentication flow")
            else:
                print("\n‚ùå Setup failed!")
        else:
            print("\nSetup cancelled.")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Setup cancelled by user")
    except Exception as e:
        print(f"\n‚ùå Setup error: {e}")


if __name__ == "__main__":
    main()